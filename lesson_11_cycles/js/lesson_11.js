

//! Циклы FOR и WHILE

// циклы нужны для многократного выполнения одного и того же кода.

//=================================================================

// Цикл WHILE

// Синтаксис
/*
while (условие) {
    Блок кода который выполняется при каждой итерации
}
*/

let number = 0;

while (number<=5) {
    console.log(number);
    number++;
}

/*
тело цикла будет выполнятся
пока условие возвращает true 
условия могут быть различными инкремент ++ , декремент -- , итд...
пока возвращает true цикл будет работать.
*/

let num = 5;

while (num) {
    console.log(num);
    num--;
}

/*
если тело цикла состоит из одной строки (команды)
фигурные скобки можно опустить
*/

let numb = 5;
while (numb) console.log(numb--);

//------------------------------------------------

//! DO...WHILE

/*
DO WHILE
используется тогда когда необходимо,
выполнить запустить код хотя бы один раз,
даже если условия возвращают false
*/

/*
Синтаксис 
do {
    Блок кода который выполняется при каждой итерации
} while (условие); 
*/

let numbers = 6;
do{
    console.log(numbers);
    numbers++;
}
while (numbers < 5);

//=================================================================

//! Цикл FOR

/*
Синтаксис 
for (начало; условия; шаг) {
    Код который выполняется при каждой итерации
} 
*/

for (let i = 0; i<=5; i++){
    console.log('Цифра '+ i);
}

/*
Работа цикла for:
1) Выполняется начало - let num = 0
2) Выполняется условие - num < 5
3) Если условие true выполняется
	тело цикла - console.log(num)
4) Выполняется шаг - num++
Повтор начиная с пункта №2
*/
//------------------------------------------------


// «встроенное» объявление переменной

for (let num = 0; num < 5; num++) {
	console.log(num);
}
console.log(num);// получим ошибку в этой строке

//------------------------------------------------



//  использование переменной обьявленной ранее в коде
let numberOne = 21;
console.log(numberOne);
console.log();
for (numberOne = 0; numberOne < 5; numberOne++) {// перезапись значения переменной numberOne = 0;
	console.log(numberOne);
}
console.log(`Вывод вне цикла: ${numberOne}`);

//------------------------------------------------

/*
Можно убрать любую часть цикла
и перенести ее в тело кода или 
обьявить значение переменной перед циклом
модно даже убрать условия numOne < 5
но тогда цикл будет выполнятся бесконечно.
*/ 

let numOne = 0;
for (; numOne < 5;) {
	numOne++;
	console.log(numOne);
}

//------------------------------------------------

//! Директива break

/*
С помощью break можно выйти из цикла, 
если нужное нам значение уже получено и 
дальнейшее выполнение кода не нужно.
*/ 

let numTwo = 0;
for (; numTwo < 10; numTwo++) {
	console.log(numTwo);
	if (numTwo == 4) break;
}
console.log(`Нужное значение полученно и = ${numTwo}`);

//------------------------------------------------

//! Директива continue

/*
С помощью continue можно пропустить часть цикла, 
(или какое либо определенное значение)
и продолжить дальнейшее выполнение кода .
*/

let numThree = 0;
for (; numThree <= 5; numThree++) {
	if (numThree == 3 || numThree == 2 ) continue;
	console.log(numThree);
}

//------------------------------------------------


//! Директива break/continue и "?" не используются вместе и приведет к ошибке

/*
let numFour = 0;
for (; numFour < 5; numFour++) {
	(numFour != 2) ? console.log(numFour) : continue;
}
*/

//------------------------------------------------

//! Вложенные циклы и метки

// Метка родительского цикла continue

firstFor: for (let num = 0; num < 2; num++) {
	for (let size = 0; size < 3; size++) {
		if (size == 2) {
			continue firstFor;
		}
		console.log(size);
	}
}

// Метка родительского цикла break

firstFor: for (let num = 0; num < 2; num++) {
	for (let size = 0; size < 3; size++) {
		if (size == 2) {
			break firstFor;
		}
		console.log(size);
	}
}

/*
1.	while – Проверяет условие перед каждой итерацией.
2.	do..while – Проверяет условие после каждой итерации.
3.	for (;;) – Проверяет условие перед каждой итерацией,
	есть возможность задать дополнительные настройки.

Чтобы организовать бесконечный цикл, используют
конструкцию while (true).
При этом он, как и любой другой цикл, может быть
прерван директивой break.

Если на данной итерации цикла делать больше
ничего не надо, но полностью прекращать цикл не
следует – используют директиву continue.

Обе этих директивы поддерживают метки, которые ставятся
перед циклом. Метки – единственный способ для break/continue
выйти за пределы текущего цикла, повлиять на выполнение внешнего.
Помним, что метки не позволяют прыгнуть в произвольное место кода,
в JavaScript нет такой возможности.

Конечно же в JavaScript существуют и другие методы перебора.
Например, перебор объектов или массивов. О них мы поговорим
в отдельных уроках, а пока домашка.
*/

//=================================================================


/*
Не рекомендуется использовать цикл for для массиввов, 
но возможно, РЕКОМЕНДУЕТСЯ использовать for Each, map, reduse
*/

//-------------------------------------------------------------------

//! Использование for для перечесления всех элементов массива (И вывода их в консоль как пример)

const arrUsersName = ['Оля', 'Вася', 'Коля','Толя'];

for (let i = 0; i<arrUsersName.length; i++){
    console.log(arrUsersName[i]);
}

//-------------------------------------------------------------------

//! Использование for each для перечесления всех элементов массива

const arrUsers = ['Оля', 'Вася', 'Коля','Толя'];

arrUsers.forEach((element, index)=>{
    console.log(element, index);
});

/*
в методе for each вызываем функцию
получаем доступ не только к элементам массива 
,но и можно получить доступ к индексу
просто для перебора элементов массивов, 
присвоить значение полученные в результате использования 
не получится каким либо переменным
*/

//-------------------------------------------------------------------

//! Использование for in 
/*
    for in используется, для выполнения действий 
со свойствами обьекта
*/

// Синтаксис
/*

for (кллюч in Object ) {
	Код который выполняется с каждым свойством обьекта
    значение свойства Object[key]
}
*/
const userDateInformation = {
    name: 'Boby',
    age:30,
    'leave city': 'Stockholm',
    'is married': true,
}

for(const keys in userDateInformation){
    console.log(keys, userDateInformation[keys]);
}

//-------------------------------------------------

// for in и вложенный обьект

const car = {
    manufacturer: 'Mazda',
    model: 'CX 5',
    yearOfProduction: {
        year: 1970,
        month: 'March',
        volume: 5 
    }
}
for(const i in car){
    console.log(i, car[i]);
}

//-------------------------------------------------------------------

//! Использование for in для массивов

//* ВАЖНО  не рекомендуется использовать, лучше использовать for each

const arrUse = ['Оля', 'Вася', 'Коля','Толя'];

for (let i in arrUse){
    console.log(arrUse[i]);
}

//-------------------------------------------------------------------

//! Использование for each для обьектов 

//Синтаксис 
/*
1 получаем все ключи 
обьекта car2 в виде массива   Object.keys(car2)
2 в цикле forEach вызываем функцию, 
которая будет вызвана столько раз сколько свойств у обьекта
3 в функции передаем лишь один параметр i (ключ)
4 console.log(i, car2[i]); выводим в консоль ключ i 
и его значение используя [i]
*/

const car2 = {
    manufacturer: 'Mazda',
    model: 'CX 5',
    yearOfProduction: 1970,
}

Object.keys(car2).forEach(i=>{
    console.log(i, car2[i]);
});

//------------------------------

// можно перебрать сразу значения свойств обьекта с помощью метода value 

const car3 = {
    manufacturer: 'Mazda',
    model: 'CX 5',
    yearOfProduction: 1970,
}

Object.values(car3).forEach(i=>{
    console.log(i);
});

// i в примерах ото просто название и может быть любым
const car4 = {
    manufacturer: 'Mazda',
    model: 'CX 5',
    yearOfProduction: 1970,
}

Object.values(car4).forEach(valueProperty=>{
    console.log(valueProperty);
});

//========================================================

//! Использование for of 

//Синтаксис 
/*
for (Element of Interable) {
    действия с элементом (блок инструкций)
}
*/
const example = 'Строка для примера.';
for (const leter of example) {
    console.log(leter);
}

//---------------------------

// for of для перебора елементов массива

const arrName = ['Оля', 'Вася', 'Коля','Толя'];

for (const element of arrName){
    console.log(element);
}

//! for of не для обьектов, нельзя итерировать.