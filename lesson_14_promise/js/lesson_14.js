

// ПРОМИСЫ

/*

Промисы необходимы что-бы приложение  
было интерактивно в процессе ожидания ответа на запросы
от сервера или запись даных БД. Дают возможность работать 
с преложением даже если оно ждет ответ. 

промисы - это ообещание предоставить результат позже.

Промис может вернуть ошибку если результат предоставить не возможно.
И такую ситуацию приложение тоже должно решать корректно

*/
/*
Состояния:
    Ожидание
Когда промис только создан

    Исполнен
Промис вернул какие либо данные или результат

    Отклонен
Возникла ошибка при исполнении. Вернул ошибку

 */

//================================================================

// Создание 

/*
Синтаксис 1

let promise = new Promise(function(resolve, reject) {
    Выполнение Асинхронных действий 
функция-исполнитель (executor)
внутри нужно вызвать одну из функций resolve или reject
});

Синтаксис 2

const myPromise = new Promise((resolve, reject) => {
    Выполнение Асинхронных действий 
функция-исполнитель (executor)
внутри нужно вызвать одну из функций resolve или reject
});

*/

//================================================================

/*
Её аргументы resolve и reject – это колбэки, 
которые предоставляет сам JavaScript. Наш код – только внутри исполнителя.

Когда он получает результат, сейчас или позже – не важно, он должен вызвать один из этих колбэков:

resolve(value) — если работа завершилась успешно, с результатом value.
reject(error) — если произошла ошибка, error – объект ошибки.

Итак, исполнитель запускается автоматически, 
он должен выполнить работу, а затем вызвать resolve или reject.


У объекта promise, возвращаемого конструктором new Promise, есть внутренние свойства:

state («состояние») — вначале "pending" («ожидание»), 
потом меняется на "fulfilled" («выполнено успешно») 
при вызове resolve или на "rejected" («выполнено с ошибкой») при вызове reject.

result («результат») — вначале undefined, далее изменяется на value 
при вызове resolve(value) или на error при вызове reject(error).

Так что исполнитель по итогу переводит promise в одно из двух состояний
1
state: "fulfilled" 
result: value

2
state: "rejected" 
result: error
*/

//================================================================

// ПОЛУЧЕНИЕ РЕЗУЛЬТАТА ПРОМИСА

/*
myPromise
.then( value => {
    Действия в случае успешного исполнения ПРОМИСА 
"fulfilled" («выполнено успешно») 
при вызове resolve  вернет в результате значение value 
})

.catch( error => {
    Действия в случае отклонения исполнения ПРОМИСА 
"rejected"  («выполнено с ошибкой»)
при вызове reject  вернет в результате значение error 
})
*/

//================================================================

// Пример

fetch('https://jsonplaceholder.typicode.com/todos/1')
    .then(response => response.json())
    .then(json => console.log(json))
    .catch(error => console.error(error));