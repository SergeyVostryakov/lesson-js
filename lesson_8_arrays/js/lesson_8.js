
//! МАССИВЫ

/*
массивы - это отдельный подвид обьектов,
который позволяет нам хранить данные, более удобный 
способ утравления данными
*/
let arr = new Array();
//Способ который практически не используется

let arr1 = [];
/*
Практически всегда используется второй вариант синтаксиса. 
В скобках мы можем указать начальные значения элементов:
*/

//============================

// Два варианта написания массива
let name  = ["Tim", "Tom", "Bob"];
let nameUser  = [
    "Tim",
    "Tom",
    "Bob",
];
/*
В массивах могут хранится различные типы данных
string,
boolean,
object,
function,
...итд 
*/
let arrayDifrentTypeDate = [
    'Bob',
    {
        color: 'red',
        year: 1980,
    },
    true,
    function () {
        console.log('Я функция, я в массиве')
    },
];

//============================

// Многомерные массивы

let matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
];
/*
Элементы массива нумеруются, начиная с нуля.
Мы можем получить элемент, указав его номер в квадратных скобках:
*/
let arrayDifrentDate = [
    'Bob',
    {
        color: 'red',
        year: 1980,
    },
    true,
    function () {
        console.log('Я функция, я в массиве');
    },
];
console.log(arrayDifrentDate[0]);
console.log(arrayDifrentDate[1]);
console.log(arrayDifrentDate[3]);

// Посмотреть в консоле все данные из массива
console.log(arrayDifrentDate);

// Вывести в консоль значение свойства вложеного обьекта, можно через dot notation
console.log(arrayDifrentDate[1].color);

// Вызов функции вложенной в массив
arrayDifrentDate[3] ();

//=====================================================================================================

/*
    Получение данных из многомерного массива
синтаксис
обрашение к переменной массива [номер элемента масива(который сам является массивом)][ключ элемента]
*/
let matrixOne = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
];
// Вывести весь масив
console.table(matrixOne);

// Вывести значение первого ключа второго элемента, цифру 4
console.log(matrixOne[1][0]);

// Вывести значение третьего ключа первого элемента, цифру 3
console.log(matrixOne[0][2]);

// Общее число элементов массива содержится в его свойстве length:
let users  = ["Tim", "Tom", "Bob", 'Billy'];
console.log(users.length);// 4 элемента 

/*
массив является обьектом соответственно, ссылочным типом данных,
соответственно при присваивании или копировании массива, 
внесение изменений, подобно поведению обьектов
*/
let arrName = ["Tim", "Tom", "Bob", 'Billy'];
console.table(arrName);

let arrUserName = arrName;
arrUserName.length = 2;
console.table(arrName);

//===========================================================
/*
Мы можем заменить элемент, 
присвоить сушествующему елементу новое значение
*/ 
let arrFruts = ["apple", "apricot", "nectarine", "orange"];

arrFruts[3] =  "persika";
console.table(arrFruts[3]);

//…Или добавить новый к существующему массиву:
arrFruts[4] =  "orange";
console.table(arrFruts[4]);

/*
При обрашении к элементу которого нет в масиве получим ошибку
console.table(arrFruts[5]);
*/

//===================================================================================

//! МЕТОДЫ МАССИВОВ.

/*
Итак с простеньким разобрались теперь перейдем к методам массивов.
Но перед этим стоит поговорить о вариантах применения для массивов.

Первый из них это очередь или упорядоченная коллекция элементов.
Очередь поддерживает два вида операций:
1. добавление элемента в конец очереди
2. удаление элемента в начале, сдвигая очередь,
	так что второй элемент становится первым.

Другой вариант применения для массивов – структура данных,
называемая стек.
Стек поддерживает два вида операций:
1. добавление элемента в конец
2. удаление последнего элемента

Массивы в JavaScript могут работать и как очередь, и как стек.
Мы можем добавлять/удалять элементы как в начало, так и в конец массива.
И в этом нам помогут следующие методы:
*/

// Метод push - добавляет элемент в конец массива

let arrUsersApp = ['Ваня', 'Коля', 'Оля',];
arrUsersApp.push('Вася');
console.log(arrUsersApp);

arrUsersApp.push('Дима', 'Катя');
console.log(arrUsersApp);

//============================

/*
Метод shift - удаляет элемент в начале,
так что второй элемент становится первым.
*/

let arrFruitBowl = ["apple", "apricot", "nectarine", "orange"];
console.table(arrFruitBowl);
arrFruitBowl.shift();
console.table(arrFruitBowl);

//==============================

// Метод pop  - удаляет последний элемент

let arrExoticFruit = ["apple", "apricot", "nectarine", "orange"];
console.table(arrExoticFruit);
arrExoticFruit.pop();
console.table(arrExoticFruit);

//==============================

// Метод unshift  - добавляет элемент в начало массива

let arrNamePerson = ['Ваня', 'Коля', 'Оля'];
console.table(arrNamePerson);
arrNamePerson.unshift('Вася');
console.table(arrNamePerson);

arrNamePerson.unshift('Вася', 'Оксана', 'Саша');
console.table(arrNamePerson);

//==============================

/*
Методы push/pop выполняются быстро, а методы shift/unshift – медленно.

Давайте рассмотрим на примере добавления элемента
в начало массива (unshift);

Просто взять и добавить элемент с номером 0 недостаточно.
Нужно также заново пронумеровать остальные элементы.

Операция unshift должна выполнить 3 действия:
 1. Добавить элемент с индексом 0.
 2. Сдвинуть все элементы вправо, заново пронумеровать их,
	заменив 0 на 1, 1 на 2 и т.д.
 3. Обновить свойство length.

Чем больше элементов содержит массив, тем больше
времени потребуется для того, чтобы их переместить,
больше операций с памятью.

А вот что бы добавить элемент в конец массива (метод push)
не нужно ничего перемещать.
Так же не нужно заново нумеровать элементы. Достаточно
увеличить значение length.
*/

//===============================================================================================================================

// Удаление/добавление/изменение конкретных элементов


let arrPerson = ['Ваня', 'Оксана', 'Коля', 'Оля', 'Ваня'];

delete arrPerson[1];
console.log(arrPerson);
console.log(arrPerson[1]);
console.log(arrPerson.length);


// Метод splice. Позволяет добавлять, удалять и заменять элементы.
// Синтаксис arr.splice(index[, deleteCount, elem1, ..., elemN])

// Удаляем элемент
let arrOne = ['Ваня', 'Иштван', 'Оля',];
// Начиная с первой позиции (Иштван), удаляем один элемент
console.table(arrOne);
arrOne.splice(1, 1);
console.table(arrOne);

// Удаляем элемент и возвращаем его в переменную
let arrTwo = ['Оксана', 'Коля', 'Оля', 'Ваня',];
console.table(arrTwo);
let removed = arrTwo.splice(1, 1);
console.log(removed);

// Заменяем элементы
let arrThree = ['Оксана', 'Коля', 'Оля', 'Ваня',];
console.table(arrThree);
// Начиная с нулевой позиции (Оксана), заменяем один элемент
arrThree.splice(0, 1, 'Коля');
console.table(arrThree);

// Добавляем элементы
let arrFour = ['Оксана', 'Коля', 'Оля', 'Ваня',];
console.table(arrFour);
// Начиная с первой позиции (перед 'Коля'), добавляем два элемента
arrFour.splice(1, 0, 'Коля', 'Маша');
console.table(arrFour);

// Удаляем элемент
let arrFive = ['Оксана', 'Коля', 'Оля', 'Ваня',];
console.table(arrFive);
// Начиная с последней позиции (Ваня), удаляем один элемент
arrFive.splice(-1, 1);
console.table(arrFive);