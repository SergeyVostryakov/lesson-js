'use strict'
//! ПРАВИЛА РАБОТЫ С ПЕРЕМЕННЫМИ
/*
    1 Все переменные должны обьявлятся перед их использованием

    2 Стараться использовать const везде, где это возможно

    3 внутри функции не изменять переменные внешних областей видимости
*/


//! ОБЛАСТИ ВИДИМОСТИ 
//? Определяет граници действия (видимости) переменной

//* глобальная область видимости WINDOW в браузере или GLOBAL в nodeJS 
/*
в глобальнай области в ней создаются переменные,и локальные области видимости

НАПРИМЕР:
 обьявляем шесть переменных

global
let x
let y
let z
Переменные в глобальной области

local1
let x
let y
локальные переменные 

local2 
let z  
локальная область дава переменная z 

Имена переменных имеют одинаковые НАЗВАНИЯ в разных областях видимости
Несмотря на одинаковые названия переменные global x и local1 x это разные переменные

ПРИ получении значения в local1 обращаясь к переменной let x мы будем обращатся к локальной переменной let x
ПРИ получении значения в local1 обращаясь к переменной let y мы будем обращатся к локальной переменной let y
ПРИ получении значения в local1 обращаясь к переменной let z мы будем обращатся к глобальной переменной let z

ПРИ получении значения в local2 обращаясь к переменной let x мы будем обращатся к глобальной переменной let x
ПРИ получении значения в local2 обращаясь к переменной let y мы будем обращатся к глобальной переменной let y
ПРИ получении значения в local2 обращаясь к переменной let z мы будем обращатся к локальной переменной let z

*/ 
//! ЖИЗНЕННЫЙ ЦИКЛ ПЕРЕМЕННОЙ
let x;
 //* переменная x обьявленна в Глобальной области видимости её назначение undefined
let y; 
//* переменная y обьявленна в Глобальной области видимости её назначение undefined

function getValue(){//? Локальная область видимости (ОБЛАСТЬ ВИДИМОСТИ ФУНКЦИИ)
    let x;
    //* переменная x обьявленна в Глобальной области видимости её назначение undefined
    x = 20;
    //* переменной x присвоено значение 20 в Локальной области видимости
    y = true;
    //* переменной y присвоено значение true в Локальной области видимости
    console.log(x);
    //* выводим значение х в консоль в рамках функции
}
getValue();//20
console.log(x);//undefined
//! ишем переменную в глобальной области видимости по этому не определенна
console.log(y);//true
//! !!!!ВАЖНО НЕ РЕКОМЕНДУЕТСЯ ИЗМЕНЯТЬ ВНЕШНИЕ ПЕРЕМЕННЫЕ ВНУТРИ ФУНКЦИИ
//* выводим значение х в консоль  присвоенное в Локальной области видимости при выполнении функции


//! ВИДИМОСТЬ ВЛОЖЕНИЙ (ЦЕПОЧКА ОБЛАСТЕЙ ВИДИМОСТИ)

const number = 30; 

function callFunctionaLLocal() {
    function innerFunctional() {
        function functionaLLocal() {
            console.log(number);
            let numberLocalFunction = 456;
            console.log(numberLocalFunction);
        }
        functionaLLocal();
    }
    innerFunctional();
    // functionaLLocal(); //!  Так же при вызове functionaLLocal(); в локальной области видимости получим ошибку
}
callFunctionaLLocal();
// console.log(numberLocalFunction);//!  ВЫЗОВ локальной переменной без вызова функции (или функций) которые её инициализируют так же выдаст ошибку 
//! При вызове локальных функций внутри глобальной области видимости получаем ошибку  functionaLLocal(); или innerFunctional(); получаем ошибку  Error: functionaLLocal is not defined
// что происходит в коде
//* ШАГ 1 создается локальная переменная numberLocalFunction и выводится в консоль её значение, в локальной области functionaLLocal
//*       вызываем в консоль значение глобальной переменной number в локальной области functionaLLocal
//* ШАГ 2 вызывая вложенную функцию functionaLLocal(); в локальной области innerFunctional создается переменная functionaLLocal
//* ШАГ 3 вызывая вложенную функцию innerFunctional(); в локальной области callFunctionaLLocal создается переменная innerFunctional
//* ШАГ 4 вызывая вложенную функцию callFunctionaLLocal(); в глобальной области создается переменная callFunctionaLLocal
//! ПОЭТОМУ ВЫЗЫВАЯ локальную функцию (или переменную) данная переменная не видна так как не создана, из-за этого и получаем ошибку

//! ТИПЫ ОБЛАСТЕЙ ВИДИМОСТИ 
// Глобальная 
// область видимости функции
// области видимости блока

// "use strict"; строгий режим не даст использоавать необьявленные переменные
//! !!!!ВАЖНО НЕ РЕКОМЕНДУЕТСЯ
//необьявленные переменные
function declareIsNotVariable() {
    declare = 567;
    console.log(declare);
}
declareIsNotVariable();
console.log(declare);//при такой записи в функции или блоке кода: declare = 567; переменная declare записывается в глобальную переменную, поэтому тут не появляется сообщение об ошибке
//!  НЕ РЕКОМЕНДУЕТСЯ такое написание кода 

//todo ПРАВИЛЬНОЕ НАПИСАНИЕ ТОГО ЖЕ КОДА
function declareVariable() {
    let varDeclare = true;
    console.log(varDeclare);
}
declareVariable();
// console.log(varDeclare);//* получим ошибку так как varDeclare существует только при вызове функции (только в локальной области видимости)

//! СТРОГИЙ РЕЖИМ
// в начале кода 'use strict'

//====================================================
//! ОБРАБОТКА ОШИБОК

/*
Выполнение кода после возникновения ошибки прикращается
для того что бы ошибка не влияла на выполнение кода, 
используется try catch

! синтаксис 
try {
    код в котором возможно возникновение ошибки
} catch (error) { //(error)параметр
    код который должен выполнятся в случае если в блоке выше есть ошибка
    (в первом блоке)
}

const fnWithError = () => {
    throw new Error('Some error');
}
fnWithError();
console.log('Continue...');

*/
const fnWithError = () => {
    throw new Error('Some error');
}

try {
    fnWithError()
} catch (error) {
    //console.error(error) для вывода ошибки
    console.log(error.message)// для вывода сообщения 'Some error'
    
}
console.log('Continue...');